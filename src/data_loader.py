"""
M√≥dulo para carregamento e prepara√ß√£o dos dados log√≠sticos.
"""

import pandas as pd
import os
from datetime import datetime

class DataLoader:
    """Classe respons√°vel pelo carregamento dos dados."""

    def __init__(self, data_path='data'):
        """
        Inicializa o DataLoader.
        
        Args:
            data_path (str): Caminho para a pasta com os arquivos CSV
        """
        self.data_path = data_path
        self.dados_logistica = None
        self.dados_mensais = None
        self.tabela_acoes = None

    def carregar_dados(self):
        """
        Carrega todos os arquivos CSV necess√°rios.
        
        Returns:
            tuple: (dados_logistica, dados_mensais, tabela_acoes)
        """
        try:
            # Carregar dados di√°rios
            self.dados_logistica = pd.read_csv(
                os.path.join(self.data_path, 'dados_logistica.csv')
            )
            
            # Carregar dados mensais
            self.dados_mensais = pd.read_csv(
                os.path.join(self.data_path, 'dados_mensais.csv')
            )
            
            # Carregar tabela de a√ß√µes
            self.tabela_acoes = pd.read_csv(
                os.path.join(self.data_path, 'tabela_acoes.csv')
            )
            
            # Converter coluna de data
            self.dados_logistica['Data'] = pd.to_datetime(
                self.dados_logistica['Data']
            )
            
            print("‚úÖ Dados carregados com sucesso!")
            print(f"üìÖ Per√≠odo analisado: {self.dados_logistica['Data'].min().strftime('%d/%m/%Y')} a {self.dados_logistica['Data'].max().strftime('%d/%m/%Y')}")
            print(f"üìä Total de registros di√°rios: {len(self.dados_logistica)}")
            print(f"üìä Total de meses: {len(self.dados_mensais)}")
            print(f"üìã Total de a√ß√µes planejadas: {len(self.tabela_acoes)}")
            
            return self.dados_logistica, self.dados_mensais, self.tabela_acoes
            
        except FileNotFoundError as e:
            print(f"‚ùå Erro ao carregar dados: {e}")
            print("Certifique-se de que os arquivos CSV est√£o na pasta 'data/'")
            raise

    def get_periodo_analise(self):
        """
        Retorna o per√≠odo de an√°lise dos dados.
        
        Returns:
            tuple: (data_inicio, data_fim)
        """
        if self.dados_logistica is not None:
            return (
                self.dados_logistica['Data'].min(),
                self.dados_logistica['Data'].max()
            )
        return None, None

    def get_estatisticas_basicas(self):
        """
        Retorna estat√≠sticas b√°sicas dos dados.
        
        Returns:
            dict: Dicion√°rio com estat√≠sticas b√°sicas
        """
        if self.dados_logistica is None:
            return None
        
        return {
            'total_registros': len(self.dados_logistica),
            'custo_total_medio': self.dados_logistica['Custo Total'].mean(),
            'frete_medio': self.dados_logistica['Frete'].mean(),
            'margem_media': self.dados_logistica['Margem %'].mean(),
            'margem_mediana': self.dados_logistica['Margem %'].median(),
            'km_total': self.dados_logistica['KM Percorridos'].sum(),
            'entregas_total': self.dados_logistica['Entregas'].sum()
        }