"""
M√≥dulo para an√°lise explorat√≥ria de dados log√≠sticos.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import json
from datetime import datetime
import warnings

class AnaliseExploratoria:
    """Classe respons√°vel pela an√°lise explorat√≥ria dos dados."""
    
    def __init__(self, dados_logistica, dados_mensais=None, tabela_acoes=None, output_path='output'):
        """
        Inicializa a an√°lise explorat√≥ria.
        
        Args:
            dados_logistica (pd.DataFrame): Dados de log√≠stica di√°rios
            dados_mensais (pd.DataFrame): Dados mensais consolidados
            tabela_acoes (pd.DataFrame): Tabela de a√ß√µes propostas
            output_path (str): Caminho para salvar os resultados
        """
        self.dados_logistica = dados_logistica
        self.dados_mensais = dados_mensais
        self.tabela_acoes = tabela_acoes
        self.output_path = output_path
        
        # Criar pastas de output
        os.makedirs(output_path, exist_ok=True)
        os.makedirs(os.path.join(output_path, 'graficos'), exist_ok=True)
        os.makedirs(os.path.join(output_path, 'relatorios'), exist_ok=True)
        
        # Configura√ß√µes
        warnings.filterwarnings('ignore')
        sns.set_style('whitegrid')
        plt.rcParams['figure.figsize'] = (14, 6)
        plt.rcParams['font.size'] = 10
        
        # Configura√ß√£o de exibi√ß√£o do pandas
        pd.set_option('display.max_columns', None)
        pd.set_option('display.precision', 2)
        
        print("‚úÖ An√°lise Explorat√≥ria inicializada!")
    
    def gerar_relatorio_completo(self):
        """
        Gera relat√≥rio completo de an√°lise explorat√≥ria.
        
        Returns:
            dict: Resultados completos da an√°lise
        """
        print("üìä Iniciando an√°lise explorat√≥ria completa...")
        
        resultados = {
            'estrutura_dados': self._analisar_estrutura_dados(),
            'estatisticas_descritivas': self._gerar_estatisticas_descritivas(),
            'composicao_custos': self._analisar_composicao_custos(),
            'rentabilidade': self._analisar_rentabilidade(),
            'tendencias_temporais': self._analisar_tendencias_temporais(),
            'eficiencia_operacional': self._analisar_eficiencia_operacional(),  # M√âTODO ADICIONADO
            'dias_criticos': self._identificar_dias_criticos(),
            'plano_acoes': self._analisar_plano_acoes() if self.tabela_acoes is not None else None,
            'resumo_executivo': self._gerar_resumo_executivo()
        }
        
        # Salvar relat√≥rio completo
        self._salvar_relatorio_completo(resultados)
        
        print("‚úÖ An√°lise explorat√≥ria conclu√≠da com sucesso!")
        return resultados
    
    def _analisar_estrutura_dados(self):
        """Analisa a estrutura dos dados."""
        print("   üìã Analisando estrutura dos dados...")
        
        info_buffer = []
        
        # Informa√ß√µes b√°sicas
        info_buffer.append("=" * 80)
        info_buffer.append("ESTRUTURA DOS DADOS LOG√çSTICOS")
        info_buffer.append("=" * 80)
        
        # Usar StringIO para capturar o output do info()
        import io
        buffer = io.StringIO()
        self.dados_logistica.info(buf=buffer)
        info_buffer.append(buffer.getvalue())
        
        info_buffer.append("\n" + "=" * 80)
        info_buffer.append("PRIMEIRAS LINHAS")
        info_buffer.append("=" * 80)
        info_buffer.append(str(self.dados_logistica.head(10)))
        
        # Informa√ß√µes do per√≠odo
        if 'Data' in self.dados_logistica.columns:
            info_buffer.append(f"\nüìÖ Per√≠odo analisado: {self.dados_logistica['Data'].min().strftime('%d/%m/%Y')} a {self.dados_logistica['Data'].max().strftime('%d/%m/%Y')}")
        
        info_buffer.append(f"üìä Total de registros di√°rios: {len(self.dados_logistica)}")
        
        if self.dados_mensais is not None:
            info_buffer.append(f"üìä Total de meses: {len(self.dados_mensais)}")
        
        if self.tabela_acoes is not None:
            info_buffer.append(f"üìã Total de a√ß√µes planejadas: {len(self.tabela_acoes)}")
        
        return "\n".join(info_buffer)
    
    def _gerar_estatisticas_descritivas(self):
        """Gera estat√≠sticas descritivas completas."""
        print("   üìà Gerando estat√≠sticas descritivas...")
        
        stats_buffer = []
        stats_buffer.append("=" * 80)
        stats_buffer.append("ESTAT√çSTICAS DESCRITIVAS")
        stats_buffer.append("=" * 80)
        
        # Estat√≠sticas b√°sicas
        stats = self.dados_logistica.describe()
        stats_buffer.append(str(stats.round(2)))
        
        stats_buffer.append("\n" + "=" * 80)
        stats_buffer.append("INFORMA√á√ïES ADICIONAIS")
        stats_buffer.append("=" * 80)
        
        # C√°lculos espec√≠ficos
        if 'Custo Total' in self.dados_logistica.columns:
            stats_buffer.append(f"üí∞ CUSTOS:")
            stats_buffer.append(f"   Custo Total M√©dio/Dia: R$ {self.dados_logistica['Custo Total'].mean():,.2f}")
            stats_buffer.append(f"   Custo Total Mediano/Dia: R$ {self.dados_logistica['Custo Total'].median():,.2f}")
            stats_buffer.append(f"   Desvio Padr√£o: R$ {self.dados_logistica['Custo Total'].std():,.2f}")
        
        if 'Frete' in self.dados_logistica.columns:
            stats_buffer.append(f"üìä RECEITAS:")
            stats_buffer.append(f"   Frete M√©dio/Dia: R$ {self.dados_logistica['Frete'].mean():,.2f}")
            stats_buffer.append(f"   Frete Mediano/Dia: R$ {self.dados_logistica['Frete'].median():,.2f}")
        
        if 'Margem %' in self.dados_logistica.columns:
            stats_buffer.append(f"üíπ MARGENS:")
            stats_buffer.append(f"   Margem M√©dia: {self.dados_logistica['Margem %'].mean():.2f}%")
            stats_buffer.append(f"   Margem Mediana: {self.dados_logistica['Margem %'].median():.2f}%")
            stats_buffer.append(f"   Margem M√≠nima: {self.dados_logistica['Margem %'].min():.2f}%")
            stats_buffer.append(f"   Margem M√°xima: {self.dados_logistica['Margem %'].max():.2f}%")
        
        return "\n".join(stats_buffer)
    
    def _analisar_composicao_custos(self):
        """Analisa a composi√ß√£o dos custos operacionais."""
        print("   üí∞ Analisando composi√ß√£o de custos...")
        
        # Verificar se as colunas necess√°rias existem
        colunas_necessarias = ['Custo Combust√≠vel', 'Custo Manuten√ß√£o', 'Custo Motorista', 'Custo Total']
        if not all(col in self.dados_logistica.columns for col in colunas_necessarias):
            return "‚ùå Colunas de custo n√£o encontradas para an√°lise"
        
        custo_combustivel_total = self.dados_logistica['Custo Combust√≠vel'].sum()
        custo_manutencao_total = self.dados_logistica['Custo Manuten√ß√£o'].sum()
        custo_motorista_total = self.dados_logistica['Custo Motorista'].sum()
        custo_total = self.dados_logistica['Custo Total'].sum()
        
        # Gerar relat√≥rio textual
        relatorio = []
        relatorio.append("=" * 80)
        relatorio.append("COMPOSI√á√ÉO DOS CUSTOS")
        relatorio.append("=" * 80)
        
        relatorio.append(f"üíµ Custo Combust√≠vel: R$ {custo_combustivel_total:,.2f} ({custo_combustivel_total/custo_total*100:.1f}%)")
        relatorio.append(f"üîß Custo Manuten√ß√£o: R$ {custo_manutencao_total:,.2f} ({custo_manutencao_total/custo_total*100:.1f}%)")
        relatorio.append(f"üë®‚Äç‚úàÔ∏è Custo Motorista: R$ {custo_motorista_total:,.2f} ({custo_motorista_total/custo_total*100:.1f}%)")
        relatorio.append(f"üí∞ CUSTO TOTAL: R$ {custo_total:,.2f}")
        
        # Gerar gr√°ficos
        self._gerar_graficos_composicao_custos(
            custo_combustivel_total, 
            custo_manutencao_total, 
            custo_motorista_total
        )
        
        return "\n".join(relatorio)
    
    def _gerar_graficos_composicao_custos(self, custo_combustivel, custo_manutencao, custo_motorista):
        """Gera gr√°ficos da composi√ß√£o de custos."""
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
        
        # Gr√°fico de pizza - Composi√ß√£o de custos
        custos = [custo_combustivel, custo_manutencao, custo_motorista]
        labels = ['Combust√≠vel', 'Manuten√ß√£o', 'Motorista']
        colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']
        explode = (0.05, 0, 0)
        
        ax1.pie(custos, labels=labels, autopct='%1.1f%%', startangle=90, 
                colors=colors, explode=explode, shadow=True)
        ax1.set_title('Composi√ß√£o dos Custos Operacionais', fontsize=14, fontweight='bold')
        
        # Gr√°fico de barras - Custos m√©dios di√°rios
        custos_medios = {
            'Combust√≠vel': self.dados_logistica['Custo Combust√≠vel'].mean(),
            'Manuten√ß√£o': self.dados_logistica['Custo Manuten√ß√£o'].mean(),
            'Motorista': self.dados_logistica['Custo Motorista'].mean()
        }
        
        ax2.bar(custos_medios.keys(), custos_medios.values(), color=colors, alpha=0.8, edgecolor='black')
        ax2.set_title('Custos M√©dios Di√°rios', fontsize=14, fontweight='bold')
        ax2.set_ylabel('Valor (R$)', fontsize=12)
        ax2.grid(axis='y', alpha=0.3)
        
        for i, (k, v) in enumerate(custos_medios.items()):
            ax2.text(i, v + 50, f'R$ {v:,.0f}', ha='center', fontweight='bold')
        
        plt.tight_layout()
        plt.savefig(os.path.join(self.output_path, 'graficos', '01_composicao_custos.png'), 
                   dpi=250, bbox_inches='tight')
        plt.close()
    
    def _analisar_rentabilidade(self):
        """Analisa a rentabilidade dos dados."""
        print("   üíπ Analisando rentabilidade...")
        
        if 'Margem %' not in self.dados_logistica.columns or 'Margem' not in self.dados_logistica.columns:
            return "‚ùå Colunas de margem n√£o encontradas para an√°lise"
        
        relatorio = []
        relatorio.append("=" * 80)
        relatorio.append("AN√ÅLISE DE RENTABILIDADE")
        relatorio.append("=" * 80)
        
        margem_total = self.dados_logistica['Margem'].sum()
        frete_total = self.dados_logistica['Frete'].sum()
        
        relatorio.append(f"üí∞ Frete Total: R$ {frete_total:,.2f}")
        relatorio.append(f"üíπ Margem Total: R$ {margem_total:,.2f}")
        relatorio.append(f"üìä Margem Percentual M√©dia: {self.dados_logistica['Margem %'].mean():.2f}%")
        
        # Classifica√ß√£o de dias por rentabilidade
        dias_excelente = len(self.dados_logistica[self.dados_logistica['Margem %'] >= 35])
        dias_bom = len(self.dados_logistica[(self.dados_logistica['Margem %'] >= 25) & (self.dados_logistica['Margem %'] < 35)])
        dias_regular = len(self.dados_logistica[(self.dados_logistica['Margem %'] >= 20) & (self.dados_logistica['Margem %'] < 25)])
        dias_critico = len(self.dados_logistica[self.dados_logistica['Margem %'] < 20])
        
        relatorio.append(f"üìà CLASSIFICA√á√ÉO DOS DIAS:")
        relatorio.append(f"   üü¢ Excelente (‚â•35%): {dias_excelente} dias ({dias_excelente/len(self.dados_logistica)*100:.1f}%)")
        relatorio.append(f"   üîµ Bom (25-35%): {dias_bom} dias ({dias_bom/len(self.dados_logistica)*100:.1f}%)")
        relatorio.append(f"   üü° Regular (20-25%): {dias_regular} dias ({dias_regular/len(self.dados_logistica)*100:.1f}%)")
        relatorio.append(f"   üî¥ Cr√≠tico (<20%): {dias_critico} dias ({dias_critico/len(self.dados_logistica)*100:.1f}%)")
        
        # Gerar gr√°ficos de rentabilidade
        self._gerar_graficos_rentabilidade(dias_excelente, dias_bom, dias_regular, dias_critico)
        
        return "\n".join(relatorio)
    
    def _gerar_graficos_rentabilidade(self, dias_excelente, dias_bom, dias_regular, dias_critico):
        """Gera gr√°ficos de an√°lise de rentabilidade."""
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
        
        # Distribui√ß√£o de margens
        ax1.hist(self.dados_logistica['Margem %'], bins=30, color='#45B7D1', alpha=0.7, edgecolor='black')
        ax1.axvline(self.dados_logistica['Margem %'].mean(), color='red', linestyle='--', 
                   linewidth=2, label=f'M√©dia: {self.dados_logistica["Margem %"].mean():.1f}%')
        ax1.axvline(self.dados_logistica['Margem %'].median(), color='green', linestyle='--', 
                   linewidth=2, label=f'Mediana: {self.dados_logistica["Margem %"].median():.1f}%')
        ax1.set_xlabel('Margem (%)', fontsize=12)
        ax1.set_ylabel('Frequ√™ncia', fontsize=12)
        ax1.set_title('Distribui√ß√£o das Margens', fontsize=14, fontweight='bold')
        ax1.legend()
        ax1.grid(alpha=0.3)
        
        # Pizza - Classifica√ß√£o de dias
        classificacao = [dias_excelente, dias_bom, dias_regular, dias_critico]
        labels_class = ['Excelente (‚â•35%)', 'Bom (25-35%)', 'Regular (20-25%)', 'Cr√≠tico (<20%)']
        colors_class = ['#2ECC71', '#3498DB', '#F39C12', '#E74C3C']
        
        ax2.pie(classificacao, labels=labels_class, autopct='%1.1f%%', startangle=90,
                colors=colors_class, shadow=True)
        ax2.set_title('Classifica√ß√£o dos Dias por Rentabilidade', fontsize=14, fontweight='bold')
        
        plt.tight_layout()
        plt.savefig(os.path.join(self.output_path, 'graficos', '02_rentabilidade.png'),  # NOME CORRIGIDO
                   dpi=250, bbox_inches='tight')
        plt.close()
    
    def _analisar_tendencias_temporais(self):
        """Analisa tend√™ncias temporais nos dados."""
        print("   üìÖ Analisando tend√™ncias temporais...")
        
        if 'Data' not in self.dados_logistica.columns:
            return "‚ùå Coluna 'Data' n√£o encontrada para an√°lise temporal"
        
        # Ordenar por data
        dados_sorted = self.dados_logistica.sort_values('Data')
        
        # Criar figura com subplots
        fig, axes = plt.subplots(3, 1, figsize=(16, 12))
        
        # Gr√°fico 1: Evolu√ß√£o da Margem
        if 'Margem %' in self.dados_logistica.columns:
            axes[0].plot(dados_sorted['Data'], dados_sorted['Margem %'], 
                        color='#2ECC71', linewidth=1.5, alpha=0.7)
            axes[0].axhline(y=self.dados_logistica['Margem %'].mean(), color='red', linestyle='--', 
                          linewidth=2, label=f'M√©dia: {self.dados_logistica["Margem %"].mean():.1f}%')
            axes[0].axhline(y=20, color='orange', linestyle='--', linewidth=2, label='Limite Cr√≠tico: 20%')
            axes[0].fill_between(dados_sorted['Data'], dados_sorted['Margem %'], 
                               alpha=0.3, color='#2ECC71')
            axes[0].set_ylabel('Margem (%)', fontsize=12, fontweight='bold')
            axes[0].set_title('Evolu√ß√£o da Margem de Lucro', fontsize=14, fontweight='bold')
            axes[0].legend(loc='best')
            axes[0].grid(alpha=0.3)
        
        # Gr√°fico 2: Evolu√ß√£o dos Custos
        if 'Custo Total' in self.dados_logistica.columns and 'Frete' in self.dados_logistica.columns:
            axes[1].plot(dados_sorted['Data'], dados_sorted['Custo Total'], 
                        label='Custo Total', color='#E74C3C', linewidth=2)
            axes[1].plot(dados_sorted['Data'], dados_sorted['Frete'], 
                        label='Frete', color='#3498DB', linewidth=2)
            axes[1].fill_between(dados_sorted['Data'], dados_sorted['Custo Total'],
                               dados_sorted['Frete'], alpha=0.3, color='#2ECC71', 
                               label='Margem')
            axes[1].set_ylabel('Valor (R$)', fontsize=12, fontweight='bold')
            axes[1].set_title('Evolu√ß√£o de Custos e Receitas', fontsize=14, fontweight='bold')
            axes[1].legend(loc='best')
            axes[1].grid(alpha=0.3)
        
        # Gr√°fico 3: Custo por KM
        if 'Custo/KM' in self.dados_logistica.columns:
            axes[2].plot(dados_sorted['Data'], dados_sorted['Custo/KM'], 
                        color='#9B59B6', linewidth=1.5)
            axes[2].axhline(y=self.dados_logistica['Custo/KM'].mean(), color='red', linestyle='--', 
                          linewidth=2, label=f'M√©dia: R$ {self.dados_logistica["Custo/KM"].mean():.4f}')
            axes[2].fill_between(dados_sorted['Data'], dados_sorted['Custo/KM'], 
                               alpha=0.3, color='#9B59B6')
            axes[2].set_xlabel('Data', fontsize=12, fontweight='bold')
            axes[2].set_ylabel('Custo/KM (R$)', fontsize=12, fontweight='bold')
            axes[2].set_title('Evolu√ß√£o do Custo por Quil√¥metro', fontsize=14, fontweight='bold')
            axes[2].legend(loc='best')
            axes[2].grid(alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(os.path.join(self.output_path, 'graficos', '03_tendencias_temporais.png'),  # NOME CORRIGIDO
                   dpi=250, bbox_inches='tight')
        plt.close()
        
        # An√°lise mensal
        relatorio = []
        relatorio.append("\n" + "=" * 80)
        relatorio.append("AN√ÅLISE MENSAL")
        relatorio.append("=" * 80)
        
        if self.dados_mensais is not None:
            dados_mensais_sorted = self.dados_mensais.sort_values('M√™s')
            colunas_interesse = ['M√™s', 'Custo Total', 'Frete', 'Margem', 'Margem %']
            colunas_disponiveis = [c for c in colunas_interesse if c in self.dados_mensais.columns]
            
            if colunas_disponiveis:
                relatorio.append(dados_mensais_sorted[colunas_disponiveis].to_string(index=False))
        
        return "\n".join(relatorio)
    
    def _analisar_eficiencia_operacional(self):  # M√âTODO ADICIONADO
        """Analisa a efici√™ncia operacional."""
        print("   üöö Analisando efici√™ncia operacional...")
        
        relatorio = []
        relatorio.append("=" * 80)
        relatorio.append("EFICI√äNCIA OPERACIONAL")
        relatorio.append("=" * 80)
        
        # An√°lise de entregas
        if 'Entregas' in self.dados_logistica.columns:
            relatorio.append(f"üöö ENTREGAS:")
            relatorio.append(f"   Total de entregas: {self.dados_logistica['Entregas'].sum():,.0f}")
            relatorio.append(f"   M√©dia de entregas/dia: {self.dados_logistica['Entregas'].mean():.0f}")
            relatorio.append(f"   Mediana de entregas/dia: {self.dados_logistica['Entregas'].median():.0f}")
        
        # An√°lise de quilometragem
        if 'KM Percorridos' in self.dados_logistica.columns:
            relatorio.append(f"üõ£Ô∏è QUILOMETRAGEM:")
            relatorio.append(f"   Total de KM percorridos: {self.dados_logistica['KM Percorridos'].sum():,.0f} km")
            relatorio.append(f"   M√©dia de KM/dia: {self.dados_logistica['KM Percorridos'].mean():,.0f} km")
            
            if 'KM/Entrega' in self.dados_logistica.columns:
                relatorio.append(f"   M√©dia de KM/entrega: {self.dados_logistica['KM/Entrega'].mean():.2f} km")
        
        # An√°lise de carga
        if 'Peso (ton)' in self.dados_logistica.columns:
            relatorio.append(f"üì¶ CARGA:")
            relatorio.append(f"   Total transportado: {self.dados_logistica['Peso (ton)'].sum():,.2f} toneladas")
            relatorio.append(f"   M√©dia/dia: {self.dados_logistica['Peso (ton)'].mean():.2f} toneladas")
        
        # An√°lise de correla√ß√£o
        relatorio.append("\n" + "=" * 80)
        relatorio.append("CORRELA√á√ÉO ENTRE VARI√ÅVEIS OPERACIONAIS")
        relatorio.append("=" * 80)
        
        colunas_analise = ['Entregas', 'KM Percorridos', 'Peso (ton)', 'Custo Total', 'Frete', 'Margem %']
        colunas_disponiveis = [c for c in colunas_analise if c in self.dados_logistica.columns]
        
        if len(colunas_disponiveis) >= 2:
            correlacao = self.dados_logistica[colunas_disponiveis].corr()
            
            # Gerar heatmap
            plt.figure(figsize=(10, 8))
            sns.heatmap(correlacao, annot=True, fmt='.2f', cmap='RdYlGn', center=0, 
                       square=True, linewidths=1, cbar_kws={"shrink": 0.8})
            plt.title('Matriz de Correla√ß√£o - Vari√°veis Operacionais', fontsize=14, fontweight='bold', pad=20)
            plt.tight_layout()
            plt.savefig(os.path.join(self.output_path, 'graficos', '04_matriz_correlacao.png'),  # NOME CORRIGIDO
                       dpi=250, bbox_inches='tight')
            plt.close()
            
            # Identificar correla√ß√µes fortes
            relatorio.append("üìä Principais correla√ß√µes identificadas:")
            for i in range(len(correlacao.columns)):
                for j in range(i+1, len(correlacao.columns)):
                    corr_value = correlacao.iloc[i, j]
                    if abs(corr_value) > 0.5:
                        relatorio.append(f"   ‚Ä¢ {correlacao.columns[i]} ‚Üî {correlacao.columns[j]}: {corr_value:.2f}")
        else:
            relatorio.append("N√£o h√° colunas suficientes para an√°lise de correla√ß√£o.")
        
        return "\n".join(relatorio)
    
    def _identificar_dias_criticos(self):
        """Identifica e analisa dias cr√≠ticos."""
        print("   üî¥ Identificando dias cr√≠ticos...")
        
        if 'Margem %' not in self.dados_logistica.columns:
            return "‚ùå Coluna 'Margem %' n√£o encontrada para an√°lise de dias cr√≠ticos"
        
        relatorio = []
        relatorio.append("=" * 80)
        relatorio.append("DIAS CR√çTICOS (Margem < 20%)")
        relatorio.append("=" * 80)
        
        dias_criticos = self.dados_logistica[self.dados_logistica['Margem %'] < 20].sort_values('Margem %')
        relatorio.append(f"Total de dias cr√≠ticos: {len(dias_criticos)} ({len(dias_criticos)/len(self.dados_logistica)*100:.1f}% do per√≠odo)")
        
        if len(dias_criticos) > 0:
            relatorio.append(f"üî¥ TOP 10 PIORES DIAS:")
            colunas_interesse = ['Data', 'Margem %', 'Custo Total', 'Frete', 'Entregas']
            if 'KM/Entrega' in self.dados_logistica.columns:
                colunas_interesse.append('KM/Entrega')
            
            colunas_disponiveis = [c for c in colunas_interesse if c in dias_criticos.columns]
            relatorio.append(dias_criticos[colunas_disponiveis].head(10).to_string(index=False))
            
            # An√°lise dos dias cr√≠ticos
            relatorio.append(f"üìä CARACTER√çSTICAS DOS DIAS CR√çTICOS:")
            relatorio.append(f"   Margem m√©dia: {dias_criticos['Margem %'].mean():.2f}%")
            
            if 'Custo/KM' in dias_criticos.columns:
                relatorio.append(f"   Custo/KM m√©dio: R$ {dias_criticos['Custo/KM'].mean():.4f}")
            
            if 'KM/Entrega' in dias_criticos.columns:
                relatorio.append(f"   KM/Entrega m√©dio: {dias_criticos['KM/Entrega'].mean():.2f} km")
            
            relatorio.append(f"   Entregas m√©dias: {dias_criticos['Entregas'].mean():.0f}")
        
        # Identificar dias com alto custo/km
        if 'Custo/KM' in self.dados_logistica.columns:
            alto_custo_km = self.dados_logistica[self.dados_logistica['Custo/KM'] > self.dados_logistica['Custo/KM'].quantile(0.9)]
            
            relatorio.append(f"‚ö†Ô∏è DIAS COM ALTO CUSTO/KM (Top 10%):")
            relatorio.append(f"   Total de dias: {len(alto_custo_km)}")
            relatorio.append(f"   Custo/KM m√©dio: R$ {alto_custo_km['Custo/KM'].mean():.4f}")
            relatorio.append(f"   vs. M√©dia geral: R$ {self.dados_logistica['Custo/KM'].mean():.4f}")
        
        # Gerar visualiza√ß√µes
        self._gerar_graficos_dias_criticos(dias_criticos)
        
        return "\n".join(relatorio)
    
    def _gerar_graficos_dias_criticos(self, dias_criticos):
        """Gera gr√°ficos para an√°lise de dias cr√≠ticos."""
        if len(dias_criticos) == 0:
            return
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
        
        # Boxplot de margens
        dados_comparacao = [self.dados_logistica['Margem %'], dias_criticos['Margem %']]
        ax1.boxplot(dados_comparacao, 
                   labels=['Todos os Dias', 'Dias Cr√≠ticos'],
                   patch_artist=True,
                   boxprops=dict(facecolor='#3498DB', alpha=0.7),
                   medianprops=dict(color='red', linewidth=2))
        ax1.set_ylabel('Margem (%)', fontsize=12)
        ax1.set_title('Compara√ß√£o de Margens', fontsize=14, fontweight='bold')
        ax1.grid(alpha=0.3)
        
        # Scatter: Custo/KM vs Margem
        if 'Custo/KM' in self.dados_logistica.columns:
            ax2.scatter(self.dados_logistica['Custo/KM'], self.dados_logistica['Margem %'], 
                      alpha=0.5, s=50, c=self.dados_logistica['Margem %'], cmap='RdYlGn')
            ax2.set_xlabel('Custo/KM (R$)', fontsize=12)
            ax2.set_ylabel('Margem (%)', fontsize=12)
            ax2.set_title('Rela√ß√£o: Custo/KM vs Margem', fontsize=14, fontweight='bold')
            ax2.grid(alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(os.path.join(self.output_path, 'graficos', '05_dias_criticos.png'),  # NOME CORRIGIDO
                   dpi=250, bbox_inches='tight')
        plt.close()
    
    def _analisar_plano_acoes(self):
        """Analisa o plano de a√ß√µes proposto."""
        print("   üìã Analisando plano de a√ß√µes...")
        
        if self.tabela_acoes is None:
            return "‚ùå Tabela de a√ß√µes n√£o dispon√≠vel para an√°lise"
        
        relatorio = []
        relatorio.append("=" * 80)
        relatorio.append("PLANO DE A√á√ïES")
        relatorio.append("=" * 80)
        
        relatorio.append("üìã A√á√ïES PLANEJADAS:")
        relatorio.append(self.tabela_acoes.to_string(index=False))
        
        # An√°lise por prioridade
        relatorio.append("\n" + "=" * 80)
        relatorio.append("AN√ÅLISE POR PRIORIDADE")
        relatorio.append("=" * 80)
        
        if 'Prioridade' in self.tabela_acoes.columns:
            for prioridade in ['Urgente', 'Priorit√°ria', 'Planejada']:
                acoes_prioridade = self.tabela_acoes[self.tabela_acoes['Prioridade'] == prioridade]
                if len(acoes_prioridade) > 0:
                    impacto_total = acoes_prioridade['Impacto'].sum() if 'Impacto' in acoes_prioridade.columns else 0
                    esforco_medio = acoes_prioridade['Esfor√ßo'].mean() if 'Esfor√ßo' in acoes_prioridade.columns else 0
                    prazo_medio = acoes_prioridade['Prazo'].mean() if 'Prazo' in acoes_prioridade.columns else 0
                    
                    relatorio.append(f"üéØ {prioridade.upper()}:")
                    relatorio.append(f"   Quantidade de a√ß√µes: {len(acoes_prioridade)}")
                    relatorio.append(f"   Impacto total: R$ {impacto_total:,.2f}")
                    relatorio.append(f"   Esfor√ßo m√©dio: {esforco_medio:.0f}/100")
                    relatorio.append(f"   Prazo m√©dio: {prazo_medio:.0f} dias")
        
        # C√°lculo do ROI potencial
        if 'Impacto' in self.tabela_acoes.columns and 'Margem' in self.dados_logistica.columns:
            impacto_total_acoes = self.tabela_acoes['Impacto'].sum()
            margem_atual_anual = self.dados_logistica['Margem'].sum() * (365 / len(self.dados_logistica))
            
            relatorio.append(f"\n" + "=" * 80)
            relatorio.append("IMPACTO POTENCIAL")
            relatorio.append("=" * 80)
            relatorio.append(f"üí∞ Margem atual (proje√ß√£o anual): R$ {margem_atual_anual:,.2f}")
            relatorio.append(f"üí° Impacto potencial das a√ß√µes: R$ {impacto_total_acoes:,.2f}")
            relatorio.append(f"üìà Aumento potencial: {(impacto_total_acoes/margem_atual_anual*100):.1f}%")
        
        # Gerar gr√°ficos do plano de a√ß√µes
        self._gerar_graficos_plano_acoes()
        
        return "\n".join(relatorio)
    
    def _gerar_graficos_plano_acoes(self):
        """Gera gr√°ficos para o plano de a√ß√µes."""
        if self.tabela_acoes is None:
            return
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
        
        # Gr√°fico de barras - Impacto por a√ß√£o
        if 'Impacto' in self.tabela_acoes.columns and 'A√ß√£o' in self.tabela_acoes.columns:
            cores_prioridade = {'Urgente': '#E74C3C', 'Priorit√°ria': '#F39C12', 'Planejada': '#3498DB'}
            cores = [cores_prioridade.get(p, '#95A5A6') for p in self.tabela_acoes['Prioridade']] if 'Prioridade' in self.tabela_acoes.columns else '#3498DB'
            
            ax1.barh(self.tabela_acoes['A√ß√£o'], self.tabela_acoes['Impacto'], color=cores, alpha=0.8, edgecolor='black')
            ax1.set_xlabel('Impacto (R$)', fontsize=12)
            ax1.set_title('Impacto Financeiro por A√ß√£o', fontsize=14, fontweight='bold')
            ax1.grid(axis='x', alpha=0.3)
            
            for i, v in enumerate(self.tabela_acoes['Impacto']):
                ax1.text(v + 1000, i, f'R$ {v:,.0f}', va='center', fontweight='bold')
        
        # Scatter - Impacto vs Esfor√ßo
        if 'Impacto' in self.tabela_acoes.columns and 'Esfor√ßo' in self.tabela_acoes.columns and 'Prioridade' in self.tabela_acoes.columns:
            for prioridade in self.tabela_acoes['Prioridade'].unique():
                dados_p = self.tabela_acoes[self.tabela_acoes['Prioridade'] == prioridade]
                ax2.scatter(dados_p['Esfor√ßo'], dados_p['Impacto'], 
                          label=prioridade, s=200, alpha=0.7, 
                          color=cores_prioridade.get(prioridade, '#95A5A6'), 
                          edgecolors='black', linewidth=2)
            
            ax2.set_xlabel('Esfor√ßo', fontsize=12)
            ax2.set_ylabel('Impacto (R$)', fontsize=12)
            ax2.set_title('Matriz: Impacto vs Esfor√ßo', fontsize=14, fontweight='bold')
            ax2.legend()
            ax2.grid(alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(os.path.join(self.output_path, 'graficos', '06_plano_acoes.png'),  # NOME CORRIGIDO
                   dpi=250, bbox_inches='tight')
        plt.close()
    
    def _gerar_resumo_executivo(self):
        """Gera resumo executivo da an√°lise."""
        print("   üìÑ Gerando resumo executivo...")
        
        resumo = {}
        
        # Informa√ß√µes b√°sicas
        if 'Data' in self.dados_logistica.columns:
            resumo['periodo_analise'] = f"{self.dados_logistica['Data'].min().strftime('%d/%m/%Y')} a {self.dados_logistica['Data'].max().strftime('%d/%m/%Y')}"
        
        resumo['total_dias'] = len(self.dados_logistica)
        
        # M√©tricas principais
        if 'Margem %' in self.dados_logistica.columns:
            resumo['margem_media'] = round(self.dados_logistica['Margem %'].mean(), 2)
        
        if 'Custo/KM' in self.dados_logistica.columns:
            resumo['custo_km_medio'] = round(self.dados_logistica['Custo/KM'].mean(), 4)
        
        if 'Entregas' in self.dados_logistica.columns:
            resumo['entregas_totais'] = int(self.dados_logistica['Entregas'].sum())
        
        if 'KM Percorridos' in self.dados_logistica.columns:
            resumo['km_totais'] = int(self.dados_logistica['KM Percorridos'].sum())
        
        # Dias cr√≠ticos
        if 'Margem %' in self.dados_logistica.columns:
            dias_criticos = len(self.dados_logistica[self.dados_logistica['Margem %'] < 20])
            resumo['dias_criticos'] = int(dias_criticos)
        
        # Impacto das a√ß√µes
        if self.tabela_acoes is not None and 'Impacto' in self.tabela_acoes.columns:
            resumo['impacto_acoes'] = float(self.tabela_acoes['Impacto'].sum())
        
        # Salvar resumo em JSON
        with open(os.path.join(self.output_path, 'relatorios', 'resumo_executivo.json'), 'w', encoding='utf-8') as f:
            json.dump(resumo, f, indent=4, ensure_ascii=False)
        
        # Gerar relat√≥rio textual do resumo
        relatorio = []
        relatorio.append("=" * 80)
        relatorio.append("RESUMO EXECUTIVO")
        relatorio.append("=" * 80)
        
        for chave, valor in resumo.items():
            chave_formatada = chave.replace('_', ' ').title()
            relatorio.append(f"   {chave_formatada}: {valor}")
        
        return "\n".join(relatorio)
    
    def _salvar_relatorio_completo(self, resultados):
        """Salva o relat√≥rio completo em arquivo de texto."""
        print("   üíæ Salvando relat√≥rio completo...")
        
        with open(os.path.join(self.output_path, 'relatorios', 'relatorio_executivo.txt'), 'w', encoding='utf-8') as f:
            f.write("RELAT√ìRIO DE AN√ÅLISE EXPLORAT√ìRIA - DADOS LOG√çSTICOS\n")
            f.write("=" * 80 + "\n\n")
            
            for secao, conteudo in resultados.items():
                if conteudo:
                    f.write(f"{conteudo}\n\n")
            
            # Adicionar conclus√µes
            f.write(self._gerar_conclusoes())
    
    def _gerar_conclusoes(self):
        """Gera conclus√µes e recomenda√ß√µes finais."""
        conclusoes = []
        conclusoes.append("=" * 80)
        conclusoes.append("CONCLUS√ïES E RECOMENDA√á√ïES")
        conclusoes.append("=" * 80)
        
        conclusoes.append("\nüìä PRINCIPAIS DESCOBERTAS")
        conclusoes.append("\n1. **Rentabilidade**")
        conclusoes.append("   - An√°lise completa das margens e identifica√ß√£o de dias cr√≠ticos")
        conclusoes.append("   - Tend√™ncias temporais e sazonalidades identificadas")
        conclusoes.append("   - Correla√ß√µes entre vari√°veis operacionais mapeadas")
        
        conclusoes.append("\n2. **Custos**")
        conclusoes.append("   - Composi√ß√£o detalhada dos custos operacionais")
        conclusoes.append("   - Identifica√ß√£o dos principais drivers de custo")
        conclusoes.append("   - An√°lise de efici√™ncia por quil√¥metro")
        
        conclusoes.append("\n3. **Efici√™ncia Operacional**")
        conclusoes.append("   - M√©tricas de entregas e quilometragem analisadas")
        conclusoes.append("   - Rela√ß√£o entre volume operacional e rentabilidade")
        conclusoes.append("   - Identifica√ß√£o de oportunidades de otimiza√ß√£o")
        
        if self.tabela_acoes is not None:
            conclusoes.append("\nüéØ RECOMENDA√á√ïES PRIORIT√ÅRIAS")
            conclusoes.append("\n**A√ß√µes Urgentes (30 dias)**")
            conclusoes.append("1. Implementar as a√ß√µes de alto impacto identificadas")
            conclusoes.append("2. Monitorar dias cr√≠ticos com aten√ß√£o")
            conclusoes.append("3. Otimizar rotas para reduzir custo por KM")
            
            conclusoes.append("\n**A√ß√µes de M√©dio Prazo (60-90 dias)**")
            conclusoes.append("4. Revisar composi√ß√£o de custos")
            conclusoes.append("5. Implementar sistema de alertas para margens baixas")
            
            conclusoes.append("\n**A√ß√µes de Longo Prazo (180 dias)**")
            conclusoes.append("6. Desenvolver modelo preditivo para rentabilidade")
            conclusoes.append("7. Implementar dashboard em tempo real")
        
        conclusoes.append("\nüí° PR√ìXIMOS PASSOS")
        conclusoes.append("1. Realizar an√°lise preditiva para prever rentabilidade")
        conclusoes.append("2. Implementar sistema de monitoramento cont√≠nuo")
        conclusoes.append("3. Validar a√ß√µes propostas com testes piloto")
        conclusoes.append("4. Atualizar an√°lise mensalmente")
        
        return "\n".join(conclusoes)


# Fun√ß√£o auxiliar para uso direto
def executar_analise_exploratoria(dados_logistica, dados_mensais=None, tabela_acoes=None, output_path='output'):
    """
    Fun√ß√£o conveniente para executar an√°lise explorat√≥ria.
    
    Args:
        dados_logistica (pd.DataFrame): Dados di√°rios de log√≠stica
        dados_mensais (pd.DataFrame): Dados mensais para refer√™ncia
        tabela_acoes (pd.DataFrame): Tabela de a√ß√µes propostas
        output_path (str): Pasta de sa√≠da
        
    Returns:
        dict: Resultados da an√°lise
    """
    analise = AnaliseExploratoria(dados_logistica, dados_mensais, tabela_acoes, output_path)
    return analise.gerar_relatorio_completo()


if __name__ == "__main__":
    # Exemplo de uso direto
    print("üîß Testando m√≥dulo de an√°lise explorat√≥ria...")
    
    # Carregar dados de exemplo (substitua por seus dados)
    try:
        dados_logistica = pd.read_csv('data/dados_logistica.csv')
        dados_logistica['Data'] = pd.to_datetime(dados_logistica['Data'])
        
        dados_mensais = pd.read_csv('data/dados_mensais.csv') if os.path.exists('data/dados_mensais.csv') else None
        tabela_acoes = pd.read_csv('data/tabela_acoes.csv') if os.path.exists('data/tabela_acoes.csv') else None
        
        # Executar an√°lise
        resultados = executar_analise_exploratoria(dados_logistica, dados_mensais, tabela_acoes)
        print("‚úÖ Teste conclu√≠do com sucesso!")
        
    except FileNotFoundError:
        print("‚ùå Arquivos de dados n√£o encontrados. Execute a partir do main.py.")